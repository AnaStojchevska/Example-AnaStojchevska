/*
 * Personal Finance Management API
 *
 * Personal Finance Management API allows analyze of a client's spending patterns against pre-defined budgets over time 
 *
 * OpenAPI spec version: v1
 * Contact: aleksandar.milosevic@asseco-see.rs
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using Microsoft.AspNetCore.Mvc;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using Example.Attributes;
using Example.Models;
using Example.Repositories;
using CsvHelper;
using System.Globalization;
using Example.Mapping;
using Example.Controllers;

namespace Example.Controllers
{

    [ApiController]
    public class TransactionsApiController : ControllerBase
    {
        private readonly ITransactionRepository _TransactionRepository;
    
        public TransactionsApiController(ITransactionRepository transactionRepository)
        {
            _TransactionRepository = transactionRepository;
        }

        [HttpPost]
        [Route("/v1/pfm/transaction/auto-categorize")]
        [ValidateModelState]
        
        public virtual IActionResult TransactionsAutoCategorize()
        { 
          

            throw new NotImplementedException();
        }

    
        [HttpPost]
        [Route("/v1/pfm/transaction/{id}/categorize")]
        [ValidateModelState]
  
        public virtual IActionResult TransactionsCategorize([FromRoute][Required]string id, [FromBody]TransactionCategorizeCommand body)
        { 
         

            throw new NotImplementedException();
        }

        [HttpGet]
        [Route("/v1/pfm/transactions")]
        [ValidateModelState]
     

        [HttpPost]
        [Route("/v1/pfm/transactions/import")]
        [ValidateModelState]
        // [ValidateAntiForgeryToken]
        public virtual async Task<IActionResult> Transactionimport(IFormFile file)
        {
            try
            {
                var fileextension = Path.GetExtension(file.FileName);
                var filename = Guid.NewGuid().ToString() + fileextension;
                var filepath = Path.Combine(Directory.GetCurrentDirectory(), "wwwroot", filename);
                using (FileStream fs = System.IO.File.Create(filepath))
                {
                    file.CopyTo(fs);
                }
                if (fileextension == ".csv")
                {
                    using (var reader = new StreamReader(filepath))
                    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                    {
                        csv.Context.RegisterClassMap<TransactionMap>();
                        var records = csv.GetRecords<Transaction>();
                        foreach (var record in records)
                        {

                  
                            await _TransactionRepository.Add(record);
                        }
                        return Ok();
                    }
                    
                }
                return BadRequest();
            }
            catch (Exception e)
            {
                return BadRequest();
            }
        }
        [HttpPost]
        [Route("/v1/pfm/transaction/{id}/split")]
        [ValidateModelState]
 
        public virtual IActionResult TransactionsSplit([FromRoute][Required]string id, [FromBody]SplitTransactionCommand body)
        { 
            

            throw new NotImplementedException();
        }
    }
}
